//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/_Scripts/RobotDog/Inputs/DogControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @DogControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DogControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DogControls"",
    ""maps"": [
        {
            ""name"": ""DogWalk"",
            ""id"": ""a90b48c7-ccc0-4d01-b967-126bff4981a9"",
            ""actions"": [
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""38298b23-3410-47cb-8f7c-bb3002442191"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStick"",
                    ""type"": ""Value"",
                    ""id"": ""2e876057-ff57-4c3e-96d2-d6b6a4c3b905"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwapCamView"",
                    ""type"": ""Button"",
                    ""id"": ""320d4e86-4f97-429b-9a77-a69ede5bd32e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""caf0cdde-c0f7-4ae9-ae85-7d67a5717e8b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a68caba1-0e58-40b4-b618-c0d994cac94b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1e2f02a4-3ecf-4499-9808-5ca8297e20c0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""901fe3c8-6803-4d1c-bea5-65ed7c766de3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dae83ba7-81b0-41d1-a1d8-48a23bd2cf7e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d9c69e28-cbab-4873-a50d-997e1d7cd5ed"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""84ecc464-243c-4132-86f4-0eb928041270"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c3f13ae8-54fe-41f1-821a-464a40e7647e"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9522a6a-5dee-4dd8-9341-208c60f24e1e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapCamView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DogWalk
        m_DogWalk = asset.FindActionMap("DogWalk", throwIfNotFound: true);
        m_DogWalk_LeftStick = m_DogWalk.FindAction("LeftStick", throwIfNotFound: true);
        m_DogWalk_RightStick = m_DogWalk.FindAction("RightStick", throwIfNotFound: true);
        m_DogWalk_SwapCamView = m_DogWalk.FindAction("SwapCamView", throwIfNotFound: true);
    }

    ~@DogControls()
    {
        Debug.Assert(!m_DogWalk.enabled, "This will cause a leak and performance issues, DogControls.DogWalk.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DogWalk
    private readonly InputActionMap m_DogWalk;
    private List<IDogWalkActions> m_DogWalkActionsCallbackInterfaces = new List<IDogWalkActions>();
    private readonly InputAction m_DogWalk_LeftStick;
    private readonly InputAction m_DogWalk_RightStick;
    private readonly InputAction m_DogWalk_SwapCamView;
    public struct DogWalkActions
    {
        private @DogControls m_Wrapper;
        public DogWalkActions(@DogControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStick => m_Wrapper.m_DogWalk_LeftStick;
        public InputAction @RightStick => m_Wrapper.m_DogWalk_RightStick;
        public InputAction @SwapCamView => m_Wrapper.m_DogWalk_SwapCamView;
        public InputActionMap Get() { return m_Wrapper.m_DogWalk; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DogWalkActions set) { return set.Get(); }
        public void AddCallbacks(IDogWalkActions instance)
        {
            if (instance == null || m_Wrapper.m_DogWalkActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DogWalkActionsCallbackInterfaces.Add(instance);
            @LeftStick.started += instance.OnLeftStick;
            @LeftStick.performed += instance.OnLeftStick;
            @LeftStick.canceled += instance.OnLeftStick;
            @RightStick.started += instance.OnRightStick;
            @RightStick.performed += instance.OnRightStick;
            @RightStick.canceled += instance.OnRightStick;
            @SwapCamView.started += instance.OnSwapCamView;
            @SwapCamView.performed += instance.OnSwapCamView;
            @SwapCamView.canceled += instance.OnSwapCamView;
        }

        private void UnregisterCallbacks(IDogWalkActions instance)
        {
            @LeftStick.started -= instance.OnLeftStick;
            @LeftStick.performed -= instance.OnLeftStick;
            @LeftStick.canceled -= instance.OnLeftStick;
            @RightStick.started -= instance.OnRightStick;
            @RightStick.performed -= instance.OnRightStick;
            @RightStick.canceled -= instance.OnRightStick;
            @SwapCamView.started -= instance.OnSwapCamView;
            @SwapCamView.performed -= instance.OnSwapCamView;
            @SwapCamView.canceled -= instance.OnSwapCamView;
        }

        public void RemoveCallbacks(IDogWalkActions instance)
        {
            if (m_Wrapper.m_DogWalkActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDogWalkActions instance)
        {
            foreach (var item in m_Wrapper.m_DogWalkActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DogWalkActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DogWalkActions @DogWalk => new DogWalkActions(this);
    public interface IDogWalkActions
    {
        void OnLeftStick(InputAction.CallbackContext context);
        void OnRightStick(InputAction.CallbackContext context);
        void OnSwapCamView(InputAction.CallbackContext context);
    }
}
